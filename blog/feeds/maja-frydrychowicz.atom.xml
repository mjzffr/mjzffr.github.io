<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>err &amp;err</title><link href="http://www.erranderr.com/blog/" rel="alternate"></link><link href="http://www.erranderr.com/blog/feeds/maja-frydrychowicz.atom.xml" rel="self"></link><id>http://www.erranderr.com/blog/</id><updated>2016-02-16T00:00:00-05:00</updated><entry><title>First Experiment withÂ TaskCluster</title><link href="http://www.erranderr.com/blog/taskcluster-learning.html" rel="alternate"></link><updated>2016-02-16T00:00:00-05:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2016-02-09:blog/taskcluster-learning.html</id><summary type="html">&lt;p&gt;&lt;a href="http://docs.taskcluster.net/"&gt;TaskCluster&lt;/a&gt; is a new-ish continuous integration system made at Mozilla. It manages the scheduling and execution of tasks based on a graph of their dependencies. It&amp;#8217;s a general &lt;span class="caps"&gt;CI&lt;/span&gt; tool, and could be used for any kind of job, not just Mozilla&amp;nbsp;things. &lt;/p&gt;
&lt;p&gt;However, the example I describe here refers to a Mozilla-centric use case of TaskCluster&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;: tasks are run per check-in on the branches of Mozilla&amp;#8217;s Mercurial repository and then results are posted to &lt;a href="https://github.com/mozilla/treeherder"&gt;Treeherder&lt;/a&gt;. For now, the tasks can be configured to run in Docker images (Linux), but other platforms are in the works&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;p&gt;So, I want to schedule a task! I need to add a new task to the task graph that&amp;#8217;s created for each revision submitted to hg.mozilla.org. (This is part of my work on deploying a suite of &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1227367"&gt;tests for the Marionette Python test runner&lt;/a&gt;, i.e. testing the test harness&amp;nbsp;itself.) &lt;/p&gt;
&lt;p&gt;The rest of this post describes what I learned while making &lt;a href="https://hg.mozilla.org/try/rev/6b7479c4aa30"&gt;this work-in-progress&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;There are builds and there are&amp;nbsp;tests&lt;/h1&gt;
&lt;p&gt;mozilla-taskcluster operates based on the info under &lt;a href="https://dxr.mozilla.org/mozilla-central/source/testing/taskcluster/tasks"&gt;&lt;code&gt;testing/taskcluster/tasks&lt;/code&gt;&lt;/a&gt; in Mozilla&amp;#8217;s source tree, where there are yaml files that describe tasks. Specific tasks can inherit common configuration options from base yaml&amp;nbsp;files. &lt;/p&gt;
&lt;p&gt;The yaml files are organized into two main categories of tasks: builds and tests. This is just a convention in mozilla-taskcluster about how to group task configurations; &lt;span class="caps"&gt;TC&lt;/span&gt; itself doesn&amp;#8217;t actually know or care whether a task is a build or a&amp;nbsp;test.&lt;/p&gt;
&lt;p&gt;The task I&amp;#8217;m creating doesn&amp;#8217;t quite fit into either category: it runs harness tests that just exercise the Python runner code in &lt;a href="http://marionette-client.readthedocs.org"&gt;marionette_client&lt;/a&gt;, so I only need a source checkout, not a Firefox build. I&amp;#8217;d like these tests to run quickly without having to wait around for a build. Another example of such a task is the recently-created &lt;a href="https://hg.mozilla.org/mozilla-central/rev/4b34c9d1a31a"&gt;ESLint task&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Scheduling a&amp;nbsp;task&lt;/h1&gt;
&lt;p&gt;Just adding a yaml file that describes your new task under &lt;code&gt;testing/taskcluster/tasks&lt;/code&gt; isn&amp;#8217;t enough to get it scheduled: you must also add it to the list of tasks in &lt;a href="https://dxr.mozilla.org/mozilla-central/source/testing/taskcluster/tasks/branches/base_jobs.yml"&gt;&lt;code&gt;base_jobs.yml&lt;/code&gt;&lt;/a&gt;, and define an identifier for your task in &lt;a href="https://dxr.mozilla.org/mozilla-central/source/testing/taskcluster/tasks/branches/base_job_flags.yml"&gt;&lt;code&gt;base_job_flags.yml&lt;/code&gt;&lt;/a&gt;. This identifier is used in &lt;code&gt;base_jobs.yml&lt;/code&gt;, and also by people who want to run your task when pushing to &lt;a href="https://wiki.mozilla.org/ReleaseEngineering/TryServer"&gt;try&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How does scheduling work? First a &lt;a href="http://docs.taskcluster.net/introduction/getting-started/#decision-tasks-and-task-graphs"&gt;decision task&lt;/a&gt; generates a &lt;em&gt;task graph&lt;/em&gt;, which describes all the tasks and their relationships. More precisely, it looks at &lt;code&gt;base_jobs.yml&lt;/code&gt; and other yaml files in &lt;code&gt;testing/taskcluster/tasks&lt;/code&gt; and spits out a json artifact, &lt;code&gt;graph.json&lt;/code&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. Then, &lt;code&gt;graph.json&lt;/code&gt; gets sent to &lt;span class="caps"&gt;TC&lt;/span&gt;&amp;#8217;s &lt;a href="http://docs.taskcluster.net/queue/api-docs/#createTask"&gt;&lt;code&gt;createTask&lt;/code&gt;&lt;/a&gt; endpoint, which takes care of the actual&amp;nbsp;scheduling.  &lt;/p&gt;
&lt;p&gt;In the excerpt below, you can see a task definition with a &lt;code&gt;requires&lt;/code&gt; field and you can recognize a lot of fields that are in common with the &amp;#8216;task&amp;#8217; section of the yaml files under &lt;code&gt;testing/taskcluster/tasks/&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;requires&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;// id of a build task that this task depends on&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;fZ42HVdDQ-KFFycr9PxptA&amp;quot;&lt;/span&gt;  
      &lt;span class="p"&gt;],&lt;/span&gt; 
      &lt;span class="s2"&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;taskId&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c2VD_eCgQyeUDVOjsmQZSg&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;treeherder&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;groupName&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Reftest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
              &lt;span class="s2"&gt;&amp;quot;groupSymbol&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tc-R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="p"&gt;},&lt;/span&gt; 
        &lt;span class="p"&gt;},&lt;/span&gt; 
        &lt;span class="s2"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Reftest test run 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[TC] Reftest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For now at least, a major assumption in the task-graph creation process seems to be that &lt;em&gt;test&lt;/em&gt; tasks can depend on &lt;em&gt;build&lt;/em&gt; tasks and &lt;em&gt;build&lt;/em&gt; tasks don&amp;#8217;t really&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; depend on anything.&amp;nbsp;So:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want your tasks to run for every push to a Mozilla hg branch, add it to the list of &lt;strong&gt;builds&lt;/strong&gt; in &lt;code&gt;base_jobs.yml&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;If you want your task to run after certain build tasks succeed, add it to the list of &lt;strong&gt;tests&lt;/strong&gt; in &lt;code&gt;base_jobs.yml&lt;/code&gt; and specify which build tasks it depends&amp;nbsp;on.&lt;/li&gt;
&lt;li&gt;Other than the above, I don&amp;#8217;t see any way to specify a dependency between task A and task B in &lt;code&gt;testing/taskcluster/tasks&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, I added &lt;code&gt;marionette-harness&lt;/code&gt; under &lt;code&gt;builds&lt;/code&gt;. Recall, my task isn&amp;#8217;t a build task, but it doesn&amp;#8217;t depend on a build, so it&amp;#8217;s not a test, so I&amp;#8217;ll treat it like a&amp;nbsp;build.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# in base_job_flags.yml&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;builds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;marionette-harness&lt;/span&gt;

&lt;span class="c1"&gt;# in base_jobs.yml&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;builds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;marionette-harness&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;platforms&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Linux64&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;types&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;opt&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;task&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tasks/tests/harness_marionette.yml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will allow me to trigger my task with the following try syntax: &lt;code&gt;try: -b o -p marionette-harness&lt;/code&gt;.&amp;nbsp;Cool.&lt;/p&gt;
&lt;h1&gt;Make your task do&amp;nbsp;stuff&lt;/h1&gt;
&lt;p&gt;Now I have to add some stuff to &lt;code&gt;tasks/tests/harness_marionette.yml&lt;/code&gt;. Many of my choices here are based on the work done for the &lt;a href="https://hg.mozilla.org/mozilla-central/rev/4b34c9d1a31a"&gt;ESLint task&lt;/a&gt;. I created a base task called &lt;code&gt;harness_test.yml&lt;/code&gt; by mostly copying bits and pieces from the basic build task, &lt;code&gt;build.yml&lt;/code&gt; and making a few small changes. The actual task, &lt;code&gt;harness_marionette.yml&lt;/code&gt; inherits from &lt;code&gt;harness_test.yml&lt;/code&gt; and defines specifics like Treeherder symbols and the command to&amp;nbsp;run.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;command&lt;/h2&gt;
&lt;p&gt;The heart of the task is in &lt;code&gt;task.payload.command&lt;/code&gt;. You could chain a bunch of shell commands together directly in this field of the yaml file, but it&amp;#8217;s better not to. Instead, it&amp;#8217;s common to call a TaskCluster-friendly shell script that&amp;#8217;s available in your task&amp;#8217;s environment. For example, the &lt;a href="https://dxr.mozilla.org/mozilla-central/source/testing/docker/desktop-test"&gt;&lt;code&gt;desktop-test&lt;/code&gt;&lt;/a&gt; docker image has a script called &lt;code&gt;test.sh&lt;/code&gt; through which you can call the &lt;a href="https://wiki.mozilla.org/ReleaseEngineering/Mozharness"&gt;mozharness&lt;/a&gt; script for your tests. There&amp;#8217;s a similar &lt;code&gt;build.sh&lt;/code&gt; script on &lt;code&gt;desktop-build&lt;/code&gt;. Both of these scripts depend on environment variables set elsewhere in your task definition, or in the Docker image used by your task. The environment might also provide utilities like &lt;a href="http://tc-vcs.readthedocs.org/en/latest/"&gt;tc-vcs&lt;/a&gt;, which is used for checking out source&amp;nbsp;code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# in harness_marionette.yml&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;payload&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;+ bash&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;+ -cx&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;+ &amp;gt;&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tc-vcs checkout ./gecko {{base_repository}} {{head_repository}} {{head_rev}} {{head_ref}} &amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cd gecko &amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./mach marionette-harness-test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My task&amp;#8217;s &lt;code&gt;payload.command&lt;/code&gt; should be moved into a custom shell script, but for now it just chains together the source checkout and a call to &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/mach"&gt;mach&lt;/a&gt;. It&amp;#8217;s not terrible of me to use mach in this case because I expect my task to work in a build environment, but most tests would likely call&amp;nbsp;mozharness.&lt;/p&gt;
&lt;h1&gt;Configuring the task&amp;#8217;s&amp;nbsp;environment&lt;/h1&gt;
&lt;p&gt;Where should the task run? What resources should it have access to? This was probably the hardest piece for me to figure&amp;nbsp;out.&lt;/p&gt;
&lt;h2&gt;docker-worker&lt;/h2&gt;
&lt;p&gt;My task will run in a docker image using a &lt;a href="http://docs.taskcluster.net/workers/docker-worker/"&gt;docker-worker&lt;/a&gt;&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;. The image, called &lt;code&gt;desktop-build&lt;/code&gt;, is defined in-tree under &lt;a href="https://dxr.mozilla.org/mozilla-central/source/testing/docker/desktop-build"&gt;&lt;code&gt;testing/docker&lt;/code&gt;&lt;/a&gt;. There are many other images defined there, but I only considered &lt;code&gt;desktop-build&lt;/code&gt; versus &lt;code&gt;desktop-test&lt;/code&gt;. I opted for &lt;code&gt;desktop-build&lt;/code&gt; because &lt;code&gt;desktop-test&lt;/code&gt; seems to contain mozharness-related stuff that I don&amp;#8217;t need for&amp;nbsp;now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# harness_test.yml&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;task-image&amp;#39;&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;public/image.tar&amp;#39;&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;taskId&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{{#task_id_for_image}}desktop-build{{/task_id_for_image}}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The image is stored as an artifact of another &lt;span class="caps"&gt;TC&lt;/span&gt; task, which makes it a &amp;#8216;task-image&amp;#8217;. Which artifact? The default is &lt;code&gt;public/image.tar&lt;/code&gt;. Which task do I find the image in? The magic incantation &lt;code&gt;'{{#task_id_for_image}}desktop-build{{/task_id_for_image}}'&lt;/code&gt; somehow&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; obtains the correct &lt;span class="caps"&gt;ID&lt;/span&gt;, and if I look at a particular run of my task, the above snippet does indeed get populated with an actual &lt;code&gt;taskId&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;public/image.tar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Mystery task that makes a desktop-build image for us. Thanks, mystery task!&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;taskId&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aqt_YdmkTvugYB5b-OvvJw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;task-image&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Snooping around in the handy &lt;a href="https://tools.taskcluster.net/task-inspector/"&gt;Task Inspector&lt;/a&gt;, I found that the magical mystery task is defined in &lt;a href="https://dxr.mozilla.org/mozilla-central/source/testing/taskcluster/tasks/image.yml"&gt;image.yml&lt;/a&gt; and runs &lt;a href="https://dxr.mozilla.org/mozilla-central/source/testing/docker/image_builder/bin/build_image.sh"&gt;&lt;code&gt;build_image.sh&lt;/code&gt;&lt;/a&gt;. Fun. It&amp;#8217;s also quite convenient to &lt;a href="http://docs.taskcluster.net/presentations/TC-102/#/images-00"&gt;define and test your own custom image&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Other details that I mostly&amp;nbsp;ignored&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# in harness_test.yml&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;scopes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Nearly all of our build tasks use tc-vcs&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;docker-worker:cache:level-{{level}}-{{project}}-tc-vcs&amp;#39;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cache&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
   &lt;span class="c1"&gt;# The taskcluster-vcs tooling stores the large clone caches in this&lt;/span&gt;
   &lt;span class="c1"&gt;# directory and will reuse them for new requests this saves about 20s~&lt;/span&gt;
   &lt;span class="c1"&gt;# and is the most generic cache possible.&lt;/span&gt;
   &lt;span class="l l-Scalar l-Scalar-Plain"&gt;level-{{level}}-{{project}}-tc-vcs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/worker/.tc-vcs&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Routes&lt;/em&gt; allow your task to be looked up in the task index. This isn&amp;#8217;t necessary in my case so I just omitted routes&amp;nbsp;altogether.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scopes&lt;/em&gt; are permissions for your tasks, and I just copied the scope that is used for checking out source&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;workerType&lt;/em&gt; is a configuration for managing the workers that run tasks. To me, this was a choice between &lt;code&gt;b2gtest&lt;/code&gt; and &lt;code&gt;b2gbuild&lt;/code&gt;, which aren&amp;#8217;t specific to b2g anyway. &lt;code&gt;b2gtest&lt;/code&gt; is more lightweight, I hear, which suits my harness-test task&amp;nbsp;fine.&lt;/li&gt;
&lt;li&gt;I had to include a few dummy values under &lt;code&gt;extra&lt;/code&gt; in &lt;code&gt;harness_test.yml&lt;/code&gt;, like &lt;code&gt;build_name&lt;/code&gt;, just because they are expected in &lt;em&gt;build&lt;/em&gt; tasks. I don&amp;#8217;t use these values for anything, but my task fails to run if I don&amp;#8217;t include&amp;nbsp;them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Yay for trial and&amp;nbsp;error&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;If you have syntax errors in your yaml, the Decision task will fail. If this happens during a try push, look under Job Details &amp;gt; Inspect Task to fine useful error&amp;nbsp;messages.&lt;/li&gt;
&lt;li&gt;Iterating on your task is pretty easy. Aside from pushing to try, you can &lt;a href="http://docs.taskcluster.net/presentations/TC-101/#/run-locally-environment"&gt;run tasks locally using vagrant&lt;/a&gt; and you can build a task graph locally as well with &lt;code&gt;mach taskcluster-graph&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Resources&lt;/h1&gt;
&lt;p&gt;Blog posts from other TaskCluster users at&amp;nbsp;Mozilla:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ehsanakhgari.org/blog/2015-09-29/my-experience-adding-new-build-type-taskcluster"&gt;https://ehsanakhgari.org/blog/2015-09-29/my-experience-adding-new-build-type-taskcluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elvis314.wordpress.com/2015/11/09/adventures-in-task-cluster-running-tests-locally/"&gt;https://elvis314.wordpress.com/2015/11/09/adventures-in-task-cluster-running-tests-locally/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elvis314.wordpress.com/2015/11/11/adventures-in-task-cluster-running-a-custom-docker-image/"&gt;https://elvis314.wordpress.com/2015/11/11/adventures-in-task-cluster-running-a-custom-docker-image/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is lots of great documentation at &lt;a href="https://docs.taskcluster.net"&gt;docs.taskcluster.net&lt;/a&gt;, but these sections were especially useful to&amp;nbsp;me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.taskcluster.net/queue/api-docs/#createTask"&gt;createTask &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.taskcluster.net/workers/"&gt;Workers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Acknowledgements&lt;/h1&gt;
&lt;p&gt;Thanks to &lt;a href="http://code.v.igoro.us/"&gt;dustin&lt;/a&gt;, pmoore and others for corrections and&amp;nbsp;feedback.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is accomplished in part thanks to &lt;a href="http://blog.gregarndt.com/taskcluster/2015/08/05/demystifying-in-tree-scheduling/"&gt;mozilla-taskcluster&lt;/a&gt;, a service that links Mozilla&amp;#8217;s hg repo to TaskCluster and creates each decision task. More at &lt;a href="http://docs.taskcluster.net/introduction/getting-started/#taskcluster-at-mozilla"&gt;TaskCluster at Mozilla&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Run tasks on any platform thanks to &lt;a href="http://docs.taskcluster.net/workers/generic-worker/"&gt;generic worker&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;To look at a &lt;code&gt;graph.json&lt;/code&gt; artifact, go to &lt;a href="http://treeherder.mozilla.org/"&gt;Treeherder&lt;/a&gt;, click a green &amp;#8216;D&amp;#8217; job, then Job details &amp;gt; Inspect Task, where you should find a list of artifacts.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;It&amp;#8217;s not &lt;em&gt;really&lt;/em&gt; true that build tasks don&amp;#8217;t depend on anything. Any task that uses a task-image depends on the task that creates the image. I&amp;#8217;m sorry for saying &amp;#8216;task&amp;#8217; five times in every sentence, by the way.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;&amp;#8230;as opposed to a &lt;a href="http://docs.taskcluster.net/workers/generic-worker/"&gt;generic worker&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;&lt;code&gt;{{#task_id_for_image}}&lt;/code&gt; is an example of a predefined variable that we can use in our &lt;span class="caps"&gt;TC&lt;/span&gt; yaml files. Where do they come from? How do they get populated? I don&amp;#8217;t know.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="mozilla"></category><category term="foss"></category><category term="ci"></category><category term="taskcluster"></category></entry><entry><title>Snapshots from my OPW Internship with Mozilla QA</title><link href="http://www.erranderr.com/blog/opw-snapshot.html" rel="alternate"></link><updated>2014-08-23T00:00:00-04:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2014-08-07:blog/opw-snapshot.html</id><summary type="html">&lt;p&gt;Throughout my &lt;span class="caps"&gt;OPW&lt;/span&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; internship with Mozilla &lt;span class="caps"&gt;QA&lt;/span&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; I&amp;#8217;ve been keeping an informal log in outline form&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. In it, I briefly describe what I accomplish (or fail to accomplish) each day, problems I encounter, who I talk to about them, which meetings I attend, what I read, useful tricks I learn, etc. So far, I have about 60-days worth of these tiny log entries about Mozilla.  Here&amp;#8217;s what they look&amp;nbsp;like:&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;img alt="Checkvist Mozilla Log Screenshot" src="http://www.erranderr.com/blog/images/checkvist-screenshot.png" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Day-to-day, the log helps me answer questions like &amp;#8220;How did I solve this weird configuration problem three weeks ago?&amp;#8221; or &amp;#8220;What should I ask about at the next team meeting?&amp;#8221; Writing also generally helps me think through a task, and the log is a quick and effective outlet for that. The other major benefit is that I can take a step back and see the overall progress of my&amp;nbsp;projects.&lt;/p&gt;
&lt;h1&gt;So, what&amp;#8217;s it like being an intern with Mozilla &lt;span class="caps"&gt;QA&lt;/span&gt;?&lt;/h1&gt;
&lt;p&gt;I&amp;#8217;m so glad you asked! First, some&amp;nbsp;context. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;OPW&lt;/span&gt; interns &lt;a href="http://www.erranderr.com/blog/remote-work.html"&gt;work remotely&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The internship position I applied for is called &amp;#8220;&lt;a href="https://wiki.mozilla.org/GNOME_Outreach_Summer2014#Mozilla_Bug_Wrangler_.28Desktop_QA.29"&gt;Bug Wrangler&lt;/a&gt;&amp;#8220;, which refers to tasks like reproducing and triaging incoming Firefox bugs, but I&amp;#8217;ve actually (mostly) been doing Django web&amp;nbsp;development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;To future interns&lt;/strong&gt;: as in my case, there can be some flexibility about your internship activities, and during your application process, you&amp;#8217;ll narrow down what you will work on. The mentor I applied to offered a Django project as an option under the Bug Wrangler umbrella, and that was more in line with my interests and experience than bug triage, so that&amp;#8217;s what I chose to focus&amp;nbsp;on.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Based on my handy log, I&amp;#8217;ll answer a slightly more specific&amp;nbsp;question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;What did Maja do during a typical week while working on a Django project for Mozilla &lt;span class="caps"&gt;QA&lt;/span&gt;?&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Routines&lt;/h2&gt;
&lt;p&gt;Often, I start my day by skimming my latest &amp;#8220;bug mail&amp;#8221; (updates from Bugzilla) and checking my Bugzilla dashboard to see if I need to follow up on anything&amp;nbsp;immediately. &lt;/p&gt;
&lt;p&gt;The other regular occurrence is about 2 hours of video meetings per week. I meet with my mentor once a week to discuss my general progress and my post-internship plans. I lurk at one &lt;span class="caps"&gt;QA&lt;/span&gt; team meeting almost every week, where I mostly don&amp;#8217;t have enough context to understand much. My mentor filled me in on some things and my understanding gradually improved. There are also two regular meetings for &lt;a href="https://github.com/mozilla/oneanddone"&gt;One and Done&lt;/a&gt;, the project I&amp;#8217;m contributing to: a weekly technical meeting to discuss the design of new features, and a biweekly check-in meeting with project managers, developers and a few key&amp;nbsp;users.&lt;/p&gt;
&lt;h2&gt;Week&amp;nbsp;3&lt;/h2&gt;
&lt;p&gt;The early weeks of the internship involved a lot of reading and trying things out, of course. At this point, I was finishing up the official Django tutorial as well as responding to some administrative requests about the&amp;nbsp;internship. &lt;/p&gt;
&lt;p&gt;Just for fun, I used vim throughout my Django learnings to rediscover some handy vim commands. I also applied the tutorial concepts to the One and Done source code as much as I could, and thus discovered what other parts of Django I need to become familiar with, like generic class-based&amp;nbsp;views. &lt;/p&gt;
&lt;p&gt;I gradually became more familiar with how the One and Done code is structured by looking at how its models are used, poking at its URLconf, and populating my local database with example&amp;nbsp;data.&lt;/p&gt;
&lt;h2&gt;Week&amp;nbsp;5&lt;/h2&gt;
&lt;p&gt;At this point, I was just about finished with my first substantial &lt;a href="https://github.com/mozilla/oneanddone/pull/124"&gt;pull request to One and Done&lt;/a&gt;. My changes broke some unit tests, which caused me to discover that some of our test data was using the wrong data type: a regular Python dictionary instead of a Django &lt;a href="https://docs.djangoproject.com/en/1.4/ref/request-response/#django.http.QueryDict"&gt;QueryDict&lt;/a&gt;.&amp;nbsp;Cool.&lt;/p&gt;
&lt;p&gt;I actually spent a bunch of time getting the unit tests to run in my dev environment, which is on a Linux virtual machine. My local copy of the project is stored in a directory that is shared between my Linux guest &lt;span class="caps"&gt;OS&lt;/span&gt; and Windows host &lt;span class="caps"&gt;OS&lt;/span&gt;, which happens to rely on file permissions that the &lt;a href="https://nose.readthedocs.org/en/latest/"&gt;nose&lt;/a&gt; testing library doesn&amp;#8217;t like. In the end, I chose to have a clone of the project in a non-shared directory that I used just for running unit&amp;nbsp;tests.&lt;/p&gt;
&lt;p&gt;My work log also describes in detail how unintended changes to my development branch in git turned my Github pull request into a giant, unreadable mess. Aaah! (Be careful what you branch from and what you merge with, friends.) I had to close my original pull request and make a new, clean one, which was fairly embarrassing. Now I remember that on that day my friend and I were co-working in my apartment to battle &lt;a href="http://www.erranderr.com/blog/remote-work.html"&gt;the loneliness of remote work&lt;/a&gt;, and she generously listened to me venting my misery about the incident. :) In retrospect, I learned a lot about&amp;nbsp;git.&lt;/p&gt;
&lt;p&gt;Later that week, that same pull request got merged and I started investigating a bug I ran into in one of the libraries our project relies on, which involved asking some questions on &lt;span class="caps"&gt;IRC&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;All around, a good&amp;nbsp;week.&lt;/p&gt;
&lt;h2&gt;Week&amp;nbsp;9&lt;/h2&gt;
&lt;p&gt;First I finished up a couple of things I had started&amp;nbsp;earlier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;updating the &lt;a href="https://github.com/mozilla/oneanddone/pull/139"&gt;One and Done readme&lt;/a&gt; to make it easier for new contributors to get&amp;nbsp;started, &lt;/li&gt;
&lt;li&gt;adding tests to a &lt;a href="https://github.com/mozilla/oneanddone/pull/151"&gt;pull request about form validation&lt;/a&gt; I had made the week&amp;nbsp;before,&lt;/li&gt;
&lt;li&gt;cleaning up an article about my &lt;a href="http://www.erranderr.com/blog/borked-migrations.html"&gt;database migration blunders&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also contributed my first few code reviews: the week before I missed an issue that someone else caught (doh!), but this week I found something that needed to be fixed (yay!). This was cool because I found the problem by simply taking the time to understand code that was &lt;a href="https://github.com/mozilla/oneanddone/pull/154#discussion_r14786905"&gt;mostly mysterious to me&lt;/a&gt;. Bonus: I learned a bit about &lt;a href="http://www.voidspace.org.uk/python/mock/"&gt;Mock and patch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By the end of the week, I was focused on sketching out the functionality and implementation of a &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1030972"&gt;new One and Done feature&lt;/a&gt;. I enjoyed working with the project managers to define the feature requirements. Figuring out how to implement them required a few more weeks of research and learning on my part, but it all worked out in the&amp;nbsp;end.&lt;/p&gt;
&lt;h1&gt;This is why I like work&amp;nbsp;logs!&lt;/h1&gt;
&lt;p&gt;Reviewing my work log to write this article was eye-opening for me, especially due to the perspective it offers of the ups and downs I experienced during my internship. On some days, I felt quite frustrated, stuck, discouraged, and all that bad stuff. So, I like how the log shows that feeling crappy for a few days here and there totally doesn&amp;#8217;t matter overall. I learned a lot in the past couple of months and it&amp;#8217;s incredibly satisfying to see that itemized in one big&amp;nbsp;list.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Outreach Program for Women&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Quality Assurance&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I write the log using &lt;a href="https://checkvist.com/"&gt;Checkvist&lt;/a&gt;. It&amp;#8217;s fantastic. I did the same while at Hacker School.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="opw"></category><category term="mozilla"></category><category term="foss"></category></entry><entry><title>Database Migrations (âYou know nothing, VersionÂ Control.â)</title><link href="http://www.erranderr.com/blog/borked-migrations.html" rel="alternate"></link><updated>2014-07-25T00:00:00-04:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2014-07-04:blog/borked-migrations.html</id><summary type="html">&lt;p&gt;This is the story of how I rediscovered what version control doesn&amp;#8217;t do for you. Sure, I understand that git doesn&amp;#8217;t track what&amp;#8217;s in my project&amp;#8217;s local database, but to understand is one thing and to &lt;em&gt;feel in your heart forever&lt;/em&gt; is another. In short, learning from mistakes and accidents is the&amp;nbsp;greatest!&lt;/p&gt;
&lt;p&gt;So, I&amp;#8217;ve been working on a Django project and as the project acquires new features, the database schema changes here and there. Changing the database from one schema to another and possibly moving data between tables is called a &lt;em&gt;migration&lt;/em&gt;. To manage database migrations, we use &lt;a href="http://south.aeracode.org/"&gt;South&lt;/a&gt;, which is sort of integrated into the project&amp;#8217;s &lt;code&gt;manage.py&lt;/code&gt; script. (This is because we&amp;#8217;re really using &lt;a href="https://github.com/mozilla/playdoh"&gt;playdoh&lt;/a&gt;, Mozilla&amp;#8217;s augmented, specially-configured flavour of&amp;nbsp;Django.)&lt;/p&gt;
&lt;p&gt;South is lovely. Whenever you change the model definitions in your Django project, you ask South to generate Python code that defines the corresponding schema migration, which you can customize as needed. We&amp;#8217;ll call this Python code a &lt;em&gt;migration file&lt;/em&gt;. To actually update your database with the schema migration, you feed the migration file to &lt;code&gt;manage.py migrate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These migration files are safely stored in your git repository, so your project has a history of database changes &lt;em&gt;that you can replay backward and forward&lt;/em&gt;. For example, let&amp;#8217;s say you&amp;#8217;re working in a different repository branch on a new feature for which you&amp;#8217;ve changed the database schema a bit. Whenever you switch to the feature branch &lt;strong&gt;you must remember&lt;/strong&gt; to apply your new database migration (migrate forward). Whenever you switch back to master &lt;strong&gt;you must remember&lt;/strong&gt; to migrate backward to the database schema expected by the code in master. &lt;strong&gt;Git doesn&amp;#8217;t know which migration your database should be at.&lt;/strong&gt; Sometimes I&amp;#8217;m distracted and I forget.&amp;nbsp;:(&lt;/p&gt;
&lt;p&gt;As always, it gets more interesting when you have project collaborators because they might push changes to migration files and &lt;strong&gt;you must pay attention and remember&lt;/strong&gt; to actually apply these migrations in the right order. We will examine one such scenario in&amp;nbsp;detail.&lt;/p&gt;
&lt;h1&gt;Adventures with Overlooked Database&amp;nbsp;Migrations&lt;/h1&gt;
&lt;p&gt;Let&amp;#8217;s call the actors Sparkles and Rainbows. Sparkles and Rainbows are both contributing to the same project and so they each regularly push or pull from the same &amp;#8220;upstream&amp;#8221; git repository. However, they each use their own local database for development. As far as the database goes, git is only tracking South migration files. Here is our&amp;nbsp;scenario.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sparkles pushes Migration Files 1, 2, 3 to upstream and applies these migrations to their local db in that&amp;nbsp;order. &lt;/li&gt;
&lt;li&gt;Rainbows pulls Migration Files 1, 2, 3 from upstream and applies them to their local db in that order.&lt;blockquote&gt;
&lt;p&gt;All is well so far. The trouble is about to&amp;nbsp;start.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Sparkles reverses Migration 3 in their local database (backward migration to Migration 2) and pushes a delete of the Migration 3 file to&amp;nbsp;upstream.&lt;/li&gt;
&lt;li&gt;Rainbows pulls from upstream: the Migration 3 file no longer exists at &lt;code&gt;HEAD&lt;/code&gt; &lt;strong&gt;but it must also be reversed in the local db&lt;/strong&gt;! Alas, Rainbows does not perform the backward migration.&amp;nbsp;:(&lt;/li&gt;
&lt;li&gt;Life goes on and Sparkles now adds Migration Files 4 and 5, applies the migrations locally and pushes the files to&amp;nbsp;upstream. &lt;/li&gt;
&lt;li&gt;Rainbows happily pulls Migrations Files 4 and 5 and applies them to their local db. &lt;blockquote&gt;
&lt;p&gt;Notice that Sparkles&amp;#8217; migration history is now 1-2-4-5 but Rainbows&amp;#8217; migration history is 1-2-3-4-5, but 3 is nolonger part of the up-to-date&amp;nbsp;project! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At some point Rainbows will encounter Django or South errors, depending on the nature of the migrations, because the database doesn&amp;#8217;t match the expected schema. No worries, though, it&amp;#8217;s git, it&amp;#8217;s South: you can go back in time and fix&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;I was recently in Rainbows&amp;#8217; position. I finally noticed that something was wrong with my database when South started refusing to apply the latest migration from upstream, telling me &amp;#8220;Sorry! I can&amp;#8217;t drop table TaskArea, it doesn&amp;#8217;t&amp;nbsp;exist!&amp;#8221; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0011&lt;/span&gt;&lt;span class="n"&gt;_auto__del_taskarea__del_field_task_area__add_field_taskkeyword_name&lt;/span&gt;
&lt;span class="n"&gt;FATAL&lt;/span&gt; &lt;span class="n"&gt;ERROR&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;SQL&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DROP&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;tasks_taskarea&lt;/span&gt; &lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1051&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown table &amp;#39;tasks_taskarea&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;
&lt;span class="n"&gt;KeyError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The model &amp;#39;taskarea&amp;#39; from the app &amp;#39;tasks&amp;#39; is not available in&lt;/span&gt;
&lt;span class="s2"&gt;this migration.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my instance of the Sparkles-Rainbows story, Migration 3 and Migration 5 both drop the TaskArea table; I&amp;#8217;m trying to apply Migration 5, and South  grumbles in response because I had never reversed Migration 3. As far as South knows, there&amp;#8217;s no such thing as a TaskArea&amp;nbsp;table. &lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a look at my migration history, which is conveniently stored in the database&amp;nbsp;itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;migration&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;south_migrationhistory&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output is shown below. The lines of interest are &lt;code&gt;0010_auth__del&lt;/code&gt; and &lt;code&gt;0010_auto__chg&lt;/code&gt;; I&amp;#8217;m trying to apply migration &lt;code&gt;0011&lt;/code&gt; but I can&amp;#8217;t, because it&amp;#8217;s the same migration as &lt;code&gt;0010_auto__del&lt;/code&gt;, which should have been reversed a few commits&amp;nbsp;ago. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;+------------------------------------------------------------------------------+
|  migration                                                                   |
+------------------------------------------------------------------------------+
|  0001_initial                                                                |
|  0002_auto__add_feedback                                                     |
|  0003_auto__del_field_task_allow_multiple_finishes                           |
|  0004_auto__add_field_task_is_draft                                          |
|  0005_auto__del_field_feedback_task__del_field_feedback_user__add_field_feed |
|  0006_auto__add_field_task_creator__add_field_taskarea_creator               |
|  0007_auto__add_taskkeyword__add_tasktype__add_taskteam__add_taskproject__ad |
|  0008_task_data                                                              |
|  0009_auto__chg_field_task_team                                              |
|  0010_auto__del_taskarea__del_field_task_area__add_field_taskkeyword_name    |
|  0010_auto__chg_field_taskattempt_user__chg_field_task_creator__chg_field_ta |
+------------------------------------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I want to migrate backwards until &lt;code&gt;0009&lt;/code&gt;, but I can&amp;#8217;t do that directly because the migration file for &lt;code&gt;0010_auto__del&lt;/code&gt; is not part of &lt;code&gt;HEAD&lt;/code&gt; anymore, just like Migration 3 in the story of Sparkles and Rainbows, so South doesn&amp;#8217;t know what to do. However, that migration does exist in a previous commit, so let&amp;#8217;s go back in&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I figure out which commit added the migration I need to&amp;nbsp;reverse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Display commit log along with names of files affected by each commit. &lt;/span&gt;
&lt;span class="c1"&gt;# Once in less, I searched for &amp;#39;0010_auto__del&amp;#39; to get to the right commit.&lt;/span&gt;
git log --name-status &lt;span class="p"&gt;|&lt;/span&gt; less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that key information, the following sequence of commands tidies everything&amp;nbsp;up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Switch to the commit that added migration 0010_auto__del&lt;/span&gt;
git checkout e67fe32c
&lt;span class="c1"&gt;# Migrate backward to a happy migration; I chose 0008 to be safe. &lt;/span&gt;
&lt;span class="c1"&gt;# ./manage.py migrate [appname] [migration]&lt;/span&gt;
./manage.py migrate oneanddone.tasks 0008
git checkout master
&lt;span class="c1"&gt;# Sync the database and migrate all the way forward using the most &lt;/span&gt;
&lt;span class="c1"&gt;# up-to-date migrations.&lt;/span&gt;
./manage.py syncdb &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./manage.py migrate
&lt;/pre&gt;&lt;/div&gt;</summary><category term="mozilla"></category><category term="foss"></category><category term="opw"></category><category term="south"></category><category term="git"></category><category term="database"></category><category term="django"></category></entry><entry><title>Open Source BridgeÂ 2014</title><link href="http://www.erranderr.com/blog/osb14.html" rel="alternate"></link><updated>2014-07-01T00:00:00-04:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2014-06-30:blog/osb14.html</id><summary type="html">&lt;p&gt;Open Source Bridge 2014 was my first conference experience in about 5 years and my first non-academic conference. It had a great mix of talks and was thoughtfully organized and super friendly. I learned about Firefox quality assurance, communication strategies, remote work, discrimination in the tech industry and being a better human. That mix could have been totally different though: during almost every session, there were 3-4 interesting talks competing for my attention, which is a good&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;Attendees were welcome to help out with conference logistics and encouraged to organize spontaneous, open meetings. For example, I spent a couple of hours volunteering as session chair, which amounts to helping each speaker set up for their talk, introducing them and giving them timing&amp;nbsp;cues. &lt;/p&gt;
&lt;p&gt;Liz and I also set up a table at the conference Hacker Lounge to &lt;a href="http://www.erranderr.com/blog/one-and-done-osbrige.html"&gt;introduce potential contributors to Firefox quality assurance and One and Done&lt;/a&gt;. We ended up supporting four people as they each set up a development environment for our project. As expected, each participant ran into snags along the way with things like database configuration so it was good to work on this in a&amp;nbsp;group. &lt;/p&gt;
&lt;p&gt;It felt awesome to share my recent experience and speed up their setup process. I think the fact that One and Done is my first Django project helped a lot: when someone is new to a project, having expert mentors is great but in many cases it&amp;#8217;s much easier to pose questions and relate to someone who is just a bit less of a beginner than you&amp;nbsp;are. &lt;/p&gt;
&lt;p&gt;That particular Hacker Lounge session got me thinking about how easy it is for potential &lt;span class="caps"&gt;FOSS&lt;/span&gt; contributors to get discouraged by setup alone. A good readme is priceless! The &lt;a href="https://github.com/mjzffr/oneanddone/blob/master/README.md"&gt;One and Done readme&lt;/a&gt; is quite detailed and helpful, but we will likely add a setup guide or dev &lt;span class="caps"&gt;FAQ&lt;/span&gt; to the projet wiki for additional support. It&amp;#8217;s silly for someone to miss out on contributing just because they get mysterious errors while installing&amp;nbsp;mysql! &lt;/p&gt;
&lt;h1&gt;Firefox Quality&amp;nbsp;Assurance&lt;/h1&gt;
&lt;p&gt;This conference happened to be an opportunity for me to work and talk in person with Liz for the first time during my &lt;span class="caps"&gt;OPW&lt;/span&gt; internship. In addition to discussing additions to One and Done, Liz gave me a nice overview of how Firefox features and bug fixes get tested and gradually make their way through a series of release channels: from Nightly, to Aurora, then Beta, then a real release. We looked through this &lt;a href="https://wiki.mozilla.org/Releases/Firefox_31/Test_Plan"&gt;Firefox 31 Test Plan&lt;/a&gt; and talked about the supporting tools used by the &lt;span class="caps"&gt;QA&lt;/span&gt;&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;Many of these tools are actually developed by Mozilla and there was a really nice talk at this year&amp;#8217;s Open Source Bridge about one such tool, Socorro, which is used for &lt;a href="http://www.opensourcebridge.org/sessions/1319"&gt;Firefox crash reporting and analysis&lt;/a&gt;. Fun&amp;nbsp;facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you go to &lt;code&gt;about:crashes&lt;/code&gt; in Firefox, you can easily access the &lt;a href="https://crash-stats.mozilla.com/"&gt;crash reports&lt;/a&gt; you&amp;#8217;ve submitted and see whether anyone is working on the associated&amp;nbsp;bug(s).&lt;/li&gt;
&lt;li&gt;Socorro stores about 3 months worth of crash reports (3-5 million crashes per day!) and those crashes are initially sent to file system storage rather  than a database. Why? A file system has better up-time than a&amp;nbsp;database.&lt;/li&gt;
&lt;li&gt;To access any particular crash quickly on that file system, a &lt;a href="http://www.twobraids.com/2012/12/socorro-file-system-storage.html"&gt;radix storage scheme&lt;/a&gt; is implemented with &lt;strong&gt;symbolic links&lt;/strong&gt;. Cool. (You can&amp;#8217;t just store thousands of files in one directory &amp;#8212; file access would be ridiculously&amp;nbsp;slow.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those points refer to just one component of Socorro &amp;#8212; there&amp;#8217;s all kinds of other neat stuff about&amp;nbsp;it.&lt;/p&gt;
&lt;h1&gt;Selected&amp;nbsp;Talks&lt;/h1&gt;
&lt;p&gt;Some of the talks I attended, like the one about Socorro, related quite closely to my current internship with&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Roan Kattouw showed us surprising and bizarre browser &lt;a href="http://www.opensourcebridge.org/sessions/1247"&gt;rendering bugs&lt;/a&gt; that he discovered while working on the &lt;a href="http://www.mediawiki.org/wiki/VisualEditor"&gt;Visual Editor&lt;/a&gt; for&amp;nbsp;Wikimedia.&lt;/li&gt;
&lt;li&gt;As it turns out, lots of people are as &lt;a href="http://www.erranderr.com/blog/remote-work.html"&gt;ambivalent about remote work&lt;/a&gt; as I am, and we all flocked to two talks about how great it is to work on a distributed team. Handy tips for remote work: &lt;a href="http://www.opensourcebridge.org/sessions/1244"&gt;overcommunicate&lt;/a&gt; and &lt;a href="http://www.opensourcebridge.org/sessions/1278"&gt;always assume good faith in text communication&lt;/a&gt;. I feel&amp;nbsp;hopeful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other talks helped me think about my future career path in the tech industry and the open source community. Unexpected bonus: many of these talks caused me to reflect about diversity and bias in our&amp;nbsp;field.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The way Julie Pagano described &lt;a href="http://www.opensourcebridge.org/sessions/1185"&gt;impostor syndrome&lt;/a&gt; really hit home: &amp;#8220;People with impostor syndrome do not share knowledge, collaborate, help with &lt;span class="caps"&gt;OSS&lt;/span&gt;, apply for jobs. [They] start small, remain small, end up&amp;nbsp;small.&amp;#8221; &lt;/li&gt;
&lt;li&gt;In a talk on &lt;a href="http://www.opensourcebridge.org/sessions/1394"&gt;negotiation&lt;/a&gt;, I learned how important it is to practice silence and pause: if you don&amp;#8217;t feel informed enough to make a decision, focus on getting your questions answered. It sounds obvious but it&amp;#8217;s hard to do in the moment! Similarly, another talk about &lt;a href="http://www.opensourcebridge.org/sessions/1291"&gt;influence&lt;/a&gt; described how to identify and respond to different communication styles and how to pay attention to the people around&amp;nbsp;us.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://franceshocutt.com/2014/07/01/why-are-these-people-following-me-leadership-for-the-introverted-uncertain-and-astonished/"&gt;Frances Hocutt&amp;#8217;s keynote&lt;/a&gt; is filled with so much awesome. Go listen to it now. Here&amp;#8217;s one of my favourite&amp;nbsp;parts:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Leadership is learned, and learning requires vulnerability, and
vulnerability depends on the safety to be vulnerable. And our communities are
demonstrably unsafe. We are artificially limiting our pool of leaders. [&amp;#8230;]
We create shame around ignorance. We devalue social and emotional
skills. [&amp;#8230;] We devalue lived experience and natural variation, and 
in its place,
we raise up a false and impossible impartiality, which ends hurting
us all. We experience incompetent and unethical leadership, and
instead of learning to lead better we devalue the idea of&amp;nbsp;leadership.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;A Delighful Conference&amp;nbsp;Experience&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;All the food was vegetarian, most of it was vegan. I eat meat but I didn&amp;#8217;t miss it at all. It somehow added to the nice atmosphere that everyone could eat&amp;nbsp;everything. &lt;/li&gt;
&lt;li&gt;The attendee badges were actually booklets that contained the conference schedule and the code of conduct. One&amp;#8217;s name appears on each side of the booklet, so no problem with flipped badges. The lanyards for the badges were colour-coded so you can easily tell who is ok with being photographed and who is&amp;nbsp;not. &lt;/li&gt;
&lt;li&gt;There was a quiet room! So nice for overwhelmed introverts like me. Being around people is exhausting.&amp;nbsp;:)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The way the conference was organized was considerate, inclusive and thoughtful. I hope to go back in future&amp;nbsp;years. &lt;/p&gt;</summary><category term="mozilla"></category><category term="foss"></category><category term="opw"></category><category term="event"></category></entry><entry><title>âOne and Doneâ comes to Open Source BridgeÂ 2014!</title><link href="http://www.erranderr.com/blog/one-and-done-osbrige.html" rel="alternate"></link><updated>2014-06-20T17:58:00-04:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2014-06-20:blog/one-and-done-osbrige.html</id><summary type="html">&lt;p&gt;So, you want to contribute to Mozilla somehow, but you&amp;#8217;re not sure where to start or who to talk to. (I felt that way just a few months ago; the anguish is still fresh in my mind.) Fortunately, there&amp;#8217;s a tool called &lt;a href="https://oneanddone.mozilla.org"&gt;One and Done&lt;/a&gt; that can help you complete your first contributions. But wait, there&amp;#8217;s&amp;nbsp;more&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can drop by the &lt;strong&gt;Hacker Lounge&lt;/strong&gt; at &lt;a href="http://www.opensourcebridge.org"&gt;Open Source Bridge&lt;/a&gt; to get started with contributions to Mozilla through One and Done, or get started with development of new One and Done features! I&amp;#8217;ll be there with &lt;a href="https://twitter.com/lizhenry"&gt;Liz&lt;/a&gt;, my &lt;a href="https://gnome.org/opw/"&gt;&lt;span class="caps"&gt;OPW&lt;/span&gt;&lt;/a&gt; internship mentor, on the evening of &lt;strong&gt;Wednesday, June 25th&lt;/strong&gt; to guide you and answer questions. Beginners&amp;nbsp;welcome!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been helping out with the development of One and Done for a few weeks now, and it&amp;#8217;s great fun. The tool aims to connect new Mozilla contributors to specific tasks according to their interests, skills and available time. It also allows you to keep a record of your accomplishments at Mozilla. We have a lot more planned for it, and if you know Python and want to learn Django, you can help us add new&amp;nbsp;features.&lt;/p&gt;
&lt;h1&gt;What to Expect at the Hacker&amp;nbsp;Lounge&lt;/h1&gt;
&lt;p&gt;We have two main activities that we&amp;#8217;ll be helping out&amp;nbsp;with. &lt;/p&gt;
&lt;h2&gt;Use One and Done to Make Contributions to&amp;nbsp;Mozilla&lt;/h2&gt;
&lt;p&gt;Dive right into your (first?) Mozilla contribution. You&amp;#8217;ll create a One and Done profile, pick some tasks that interest you and record your progress. If you run into any snags, we&amp;#8217;ll be there to help you out or show you how to engage with project teams through &lt;span class="caps"&gt;IRC&lt;/span&gt;, mailing lists and so&amp;nbsp;on. &lt;/p&gt;
&lt;p&gt;If you have suggestions for how to make One and Done more useful or if you encounter a bug in the tool, we&amp;#8217;ll show you how to use Bugzilla to share your feedback with the One and Done&amp;nbsp;team.&lt;/p&gt;
&lt;h2&gt;Work on One and Done as a Python&amp;nbsp;Developer&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s lots to do if you want to work on One and Done itself. It&amp;#8217;s essentially a Django project and a nice example of how web development is done at Mozilla. The &lt;a href="https://github.com/mozilla/oneanddone"&gt;One and Done source code&lt;/a&gt; is hosted on&amp;nbsp;Github.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be happy to help you set up your development environment and build the project. Not a Github person yet? That&amp;#8217;s ok, I can help with that, too. :) We can chat about the project structure and some Django basics, as well as where to find project requirements and how to use Bugzilla to collaborate with the One and Done&amp;nbsp;team.&lt;/p&gt;</summary><category term="mozilla"></category><category term="foss"></category><category term="opw"></category><category term="event"></category></entry><entry><title>Project Management atÂ Mozilla</title><link href="http://www.erranderr.com/blog/bugzilla-github.html" rel="alternate"></link><updated>2014-06-18T00:00:00-04:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2014-06-05:blog/bugzilla-github.html</id><summary type="html">&lt;p&gt;One of the most interesting aspects of my &lt;a href="https://wiki.gnome.org/OutreachProgramForWomen"&gt;&lt;span class="caps"&gt;OPW&lt;/span&gt;&lt;/a&gt; internship is learning how contributions and planning are managed in Mozilla projects. So huge! So many contributors! Ahhh! Mozilla is known for giant projects like Firefox, but it also builds lots of supporting tools and websites. All projects, big and small, are managed using Bugzilla and often a mix of other tools, depending on the project team. My observations are based mostly on one project that I&amp;#8217;ve become familiar with: &lt;a href="https://github.com/mozilla/oneanddone"&gt;One and Done&lt;/a&gt;. Warning: I&amp;#8217;m going to say &amp;#8220;Bugzilla&amp;#8221; a&amp;nbsp;lot.&lt;/p&gt;
&lt;h1&gt;Bugzilla&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://bugzilla.mozilla.org/"&gt;Bugzilla&lt;/a&gt; is used to describe &amp;#8220;bugs&amp;#8221; and track their status. A &amp;#8220;bug&amp;#8221; in Bugzilla in not necessarily a problem that needs to be fixed: it can be feature planned by the core project team, a suggestion from a community member, a representation of a project milestone or even a request for new office furniture for a team member.&amp;nbsp;Seriously.&lt;/p&gt;
&lt;p&gt;Ideally, all the discussion about a bug takes place publicly in its Comments section on Bugzilla so that everyone can see how the bug is evolving and anyone can join in. (Not all discussion is public: bugs that relate to a security vulnerability can only be viewed by authorized&amp;nbsp;users.)&lt;/p&gt;
&lt;p&gt;If the bug represents a new feature, people might use the Comments section to narrow down or adjust requirements, request clarification or feedback,&amp;nbsp;etc. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1020981"&gt;Example 1: Profile button&amp;nbsp;bug&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1005082"&gt;Example 2: Front page header text&amp;nbsp;bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bugzilla is also where developers submit solutions for &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/How_to_Submit_a_Patch#Getting_the_patch_reviewed"&gt;code review&lt;/a&gt;. &lt;/p&gt;
&lt;h1&gt;Bugzilla with&amp;nbsp;Github&lt;/h1&gt;
&lt;p&gt;Like many other Mozilla projects, One and Done has its repository hosted on Github. Github Issues are not used at all since Bugzilla bugs fulfill their role. When a developer makes a pull request on Github, that &lt;span class="caps"&gt;PR&lt;/span&gt; should refer to a Bugzilla bug &lt;span class="caps"&gt;ID&lt;/span&gt; and it should be &lt;a href="http://globau.wordpress.com/2013/10/21/github-pull-requests-and-bugzilla/"&gt;attached to the bug&lt;/a&gt; in Bugzilla with a request for review. (&lt;a href="https://github.com/mozilla/oneanddone/pull/124"&gt;Example 3: Completed Tasks &lt;span class="caps"&gt;PR&lt;/span&gt;&lt;/a&gt;.) One can also add a brief summary of the &lt;span class="caps"&gt;PR&lt;/span&gt; in the bug comments. Detailed discussion and feedback about the code takes place in the pull request on Github, but a summary thereof is always included in Bugzilla, often by the&amp;nbsp;reviewer. &lt;/p&gt;
&lt;h1&gt;One Source of&amp;nbsp;Information&lt;/h1&gt;
&lt;p&gt;Since there are so many tools available to describe and communicate about project progress, it&amp;#8217;s a common problem to have project information spread around in many different places, where it may be overlooked or become&amp;nbsp;out-of-date. &lt;/p&gt;
&lt;p&gt;In the case of One and Done, although there is a &lt;a href="https://wiki.mozilla.org/QA/OneandDone"&gt;project wiki&lt;/a&gt;, a &lt;a href="https://github.com/mozilla/oneanddone"&gt;Github repo&lt;/a&gt;, a &lt;a href="https://mozilla.kanbanery.com/projects/45827/board/?key=fe86e00cb6c613df344772a58b72bd92a0f38995"&gt;Kanban board&lt;/a&gt; and brief discussion over &lt;span class="caps"&gt;IRC&lt;/span&gt; and email,  all the key project data is in Bugzilla or linked-to from there. As a contributor to the project, there&amp;#8217;s really only one place I need to look for definitive information, and that&amp;#8217;s Bugzilla. Bugzilla, Bugzilla,&amp;nbsp;Bugzilla.&lt;/p&gt;</summary><category term="mozilla"></category><category term="foss"></category></entry><entry><title>Working Remotely isâ¦ Hard? Different?Â Strange?</title><link href="http://www.erranderr.com/blog/remote-work.html" rel="alternate"></link><updated>2014-05-23T15:30:00-04:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2014-05-23:blog/remote-work.html</id><summary type="html">&lt;p&gt;My internship with Mozilla involves work within a team whose members are located around the world and not where I am. Some are Mozilla employees or maybe contractors, some are interns like me, some might be volunteers. The key point is that it&amp;#8217;s not just me with my mentor, focused on our own area: I need to find my voice in this in group of people, and that&amp;#8217;s where working remotely gets&amp;nbsp;hard. &lt;/p&gt;
&lt;p&gt;My very initial, tentative impressions of full-time, remote work is that it&amp;#8217;s not bad, but it takes more getting used to than I expected. I&amp;#8217;ve worked from home a lot, as a developer and as a teacher, but I&amp;#8217;ve only ever collaborated on projects with people that I spend time with &amp;#8220;at the office&amp;#8221; or that I meet with in person from time to time. My current full-time, remote status makes me realize that chatting and getting to know coworkers between bursts of productivity is pretty valuable! Crazy! Time for me to refer you to &lt;a href="http://theoatmeal.com/comics/working_home"&gt;Why working from home is both awesome and horrible&lt;/a&gt;.&lt;/p&gt;</summary><category term="opw"></category><category term="mozilla"></category><category term="foss"></category><category term="feelings"></category></entry><entry><title>Dive In! Applying to the FOSS Outreach Program forÂ Women</title><link href="http://www.erranderr.com/blog/applying-to-opw.html" rel="alternate"></link><updated>2014-05-13T13:00:00-04:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2014-05-13:blog/applying-to-opw.html</id><summary type="html">&lt;p&gt;I just started an internship with Mozilla&amp;#8217;s &lt;a href="https://quality.mozilla.org/"&gt;Quality Assurance&lt;/a&gt; team as part of the &lt;span class="caps"&gt;GNOME&lt;/span&gt; Foundation&amp;#8217;s &lt;a href="https://gnome.org/opw/"&gt;Outreach Program for Women&lt;/a&gt; (&lt;span class="caps"&gt;OPW&lt;/span&gt;), but I almost didn&amp;#8217;t even apply! In fact, I had decided &lt;em&gt;not&lt;/em&gt; to apply for silly reasons, and then a week before the &lt;em&gt;extended&lt;/em&gt; deadline I abruptly changed my mind &amp;#8212; after some encouragement from the wonderful people at my &lt;a href="https://www.hackerschool.com/"&gt;Hacker School&lt;/a&gt; batch. (As it happens, I almost didn&amp;#8217;t apply to Hacker School either. This is a&amp;nbsp;pattern.)&lt;/p&gt;
&lt;p&gt;Of course, I&amp;#8217;m very pleased that I did apply in the end, not just because I was ultimately selected for an internship but because the process itself was incredibly instructive. By the time I submitted my application, I felt like I could start contributing to Mozilla on my own regardless of whether I got an&amp;nbsp;internship. &lt;/p&gt;
&lt;p&gt;Overcoming initial barriers is built into the &lt;span class="caps"&gt;OPW&lt;/span&gt; application process: I interacted with people on &lt;span class="caps"&gt;IRC&lt;/span&gt; and it was scary but productive and good; I posted to project mailing lists and it was scary but productive and good; I added information to bugs in Bugzilla, and it was scary but productive and good. You get the idea&amp;#8230; I made mistakes sometimes, but I fixed them and nothing terrible happened and no one seemed to hate&amp;nbsp;me.&lt;/p&gt;
&lt;h1&gt;Context&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Wait, what&amp;#8217;s this Outreach Program for Women?&lt;/em&gt; The &lt;span class="caps"&gt;GNOME&lt;/span&gt; Foundation and many others want more people who identify as women or genderqueer to be involved in contributions to free and open source software (&lt;span class="caps"&gt;FOSS&lt;/span&gt;). Awesome! So one thing &lt;span class="caps"&gt;GNOME&lt;/span&gt; does is organize payed internships with various &lt;span class="caps"&gt;FOSS&lt;/span&gt; organizations especially for this category of humans. To apply, the human in question must learn about the participating organizations and their available projects, choose one or more projects of interest, &lt;em&gt;interact with current contributors&lt;/em&gt; and &lt;em&gt;contribute something themselves&lt;/em&gt;. Depending on the project, one&amp;#8217;s application process might take a few weeks. The project descriptions indicate how you can get started with contributing, and you need to communicate with the project mentor about what you might work on during the&amp;nbsp;application.&lt;/p&gt;
&lt;h1&gt;My Application&amp;nbsp;Experience&lt;/h1&gt;
&lt;p&gt;I started working on my application a week before the deadline, and I spent 7 full days on my application, setting aside my other Hacker School projects during that time. By the deadline, I wasn&amp;#8217;t sure my contribution was substantial enough but I submitted what I had anyway. That being said, the process seems relatively flexible and varies across organizations. I could have expanded my contributions after the application deadline &amp;#8212; the reason I didn&amp;#8217;t boils down to other time constraints on my&amp;nbsp;side.&lt;/p&gt;
&lt;p&gt;My application was for the &lt;a href="https://wiki.mozilla.org/GNOME_Outreach_Summer2014#Mozilla_Bug_Wrangler_.28Desktop_QA.29"&gt;Bug Wrangler&lt;/a&gt; internship with Mozilla. When I contacted the designated mentor, Liz (&lt;a href="https://twitter.com/lizhenry"&gt;@lhenry&lt;/a&gt;), I explained that I&amp;#8217;m more interested in the software development aspects of the position, and she suggested some more specific projects based on&amp;nbsp;that. &lt;/p&gt;
&lt;p&gt;At that point, I only had a few days left to make a contribution to the project in question, so I focused on gaining experience with tasks related to the bug life-cycle at Mozilla: reproducing and adding information to unconfirmed bugs in &lt;a href="https://bugzilla.mozilla.org/"&gt;Bugzilla&lt;/a&gt;, testing the latest nightly build of Firefox to verify that bugs have been fixed, and so on. I also set up the development environment for a Django project I might work on during the internship. I managed to build the project and wanted to contribute something to it as part of my application, but I felt that I didn&amp;#8217;t have enough time to communicate with the project team before the application deadline. (I regret this; maybe I should have just jumped&amp;nbsp;in.)&lt;/p&gt;
&lt;p&gt;Here are some examples of how I spent my time during the application process, &lt;strong&gt;aside from making my contributions and writing the application itself&lt;/strong&gt;. These small tasks add up, both in terms of time and in terms of making future contributions&amp;nbsp;easier. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reading&lt;/strong&gt;, so much panic and reading. Things I read or skimmed: project descriptions, contributor/tool guides/documentation, Bugzilla terminology and Firefox/Mozilla components, bug reports, pull request discussions on Github, mailing-list archives, press releases, blog posts by past interns, project meeting minutes, &lt;span class="caps"&gt;IRC&lt;/span&gt; etiquette,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Setup and configuration&lt;/strong&gt;: registration with things like Bugzilla, &lt;span class="caps"&gt;IRC&lt;/span&gt;, Mozillians; choosing and setting up an &lt;span class="caps"&gt;IRC&lt;/span&gt; client; configuring a testing environment for&amp;nbsp;Firefox.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt; : emailing and chatting with the project mentor about available projects, my interests, and the application process; asking questions on &lt;span class="caps"&gt;IRC&lt;/span&gt; when I run into issues; I participated in a small video meeting during a Mozilla Test Day; introduced myself and asked for help on a couple of mailing&amp;nbsp;lists.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learning&lt;/strong&gt; in preparation for more contributions: trying out the specific tools I might work on to gain a user perspective; reading about Django and building one of Mozilla&amp;#8217;s Django projects; setting up a database for&amp;nbsp;it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My top tips for&amp;nbsp;applying: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Communicate a lot. (I think that&amp;#8217;s almost the whole&amp;nbsp;point.)&lt;/li&gt;
&lt;li&gt;Keep a brief, informal log of what you do as you do it. The log is handy for when you have questions later, when you come back to the project after a few weeks away, when you&amp;#8217;re writing your application, and so&amp;nbsp;on.&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t assume there is some universally accepted, perfect approach to your task. There are grey areas. Example: how to classify a particular Firefox bug. So, do ask questions! Remember that &amp;#8220;experts&amp;#8221; ask questions, too, and interesting discussion among several helpful people many ensue, which is really cool.&amp;nbsp;:)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#8217;ll say it again: the &lt;span class="caps"&gt;OPW&lt;/span&gt; internship application process is a great learning experience. Although I already knew a good amount about &lt;span class="caps"&gt;FOSS&lt;/span&gt; before I got started, I now have a much better sense for how a giant, open source project like Firefox grows and stays&amp;nbsp;healthy. &lt;/p&gt;
&lt;p&gt;Do apply! Encourage others to&amp;nbsp;apply! &lt;/p&gt;</summary><category term="mozilla"></category><category term="career"></category><category term="opw"></category><category term="foss"></category></entry></feed>