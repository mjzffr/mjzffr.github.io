<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>err &amp;err</title><link href="http://www.erranderr.com/blog/" rel="alternate"></link><link href="http://www.erranderr.com/blog/feeds/automation.atom.xml" rel="self"></link><id>http://www.erranderr.com/blog/</id><updated>2016-05-02T00:00:00-04:00</updated><entry><title>Not Testing a Firefox Build (Generic Tasks inÂ TaskCluster)</title><link href="http://www.erranderr.com/blog/taskcluster-generic-tasks.html" rel="alternate"></link><updated>2016-05-02T00:00:00-04:00</updated><author><name>Maja Frydrychowicz</name></author><id>tag:www.erranderr.com,2016-05-02:blog/taskcluster-generic-tasks.html</id><summary type="html">&lt;p&gt;A few months ago I wrote about my &lt;a href="http://www.erranderr.com/blog/taskcluster-learning.html"&gt;tentative setup&lt;/a&gt; of a TaskCluster task that was neither a build nor a test. Since then, gps has implemented &lt;a href="https://groups.google.com/forum/#!searchin/mozilla.dev.platform/generic$20task/mozilla.dev.platform/bNYp2HDyeqU/tg4mnGHEAwAJ"&gt;&amp;#8220;generic&amp;#8221; in-tree tasks&lt;/a&gt; so I &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1227367#c116"&gt;adapted my initial work&lt;/a&gt; to take advantage of&amp;nbsp;that.&lt;/p&gt;
&lt;h1&gt;Triggered by file&amp;nbsp;changes&lt;/h1&gt;
&lt;p&gt;All along I wanted to run some in-tree tests without having them wait around for a Firefox build or any other dependencies they don&amp;#8217;t need. So I originally implemented this task as a &lt;a href="http://www.erranderr.com/blog/taskcluster-learning.html#scheduling_summary"&gt;&amp;#8220;build&amp;#8221;&lt;/a&gt; so that it would get scheduled for every incoming changeset in Mozilla&amp;#8217;s&amp;nbsp;repositories. &lt;/p&gt;
&lt;p&gt;But forget &amp;#8220;builds&amp;#8221;, forget &amp;#8220;tests&amp;#8221; &amp;#8212; now there&amp;#8217;s a third category of tasks that we&amp;#8217;ll call &amp;#8220;generic&amp;#8221; and it&amp;#8217;s exactly what I&amp;nbsp;need. &lt;/p&gt;
&lt;p&gt;In &lt;a href="https://hg.mozilla.org/mozilla-central/diff/e4ea9261d5bb/testing/taskcluster/tasks/branches/base_jobs.yml"&gt;base_jobs.yml&lt;/a&gt; I say, &amp;#8220;hey, here&amp;#8217;s a new task called &lt;code&gt;marionette-harness&lt;/code&gt; &amp;#8212; run it whenever there&amp;#8217;s a change under (branch)/testing/marionette/harness&amp;#8221;. Of course, I can also just trigger the task with try syntax like &lt;code&gt;try: -p linux64_tc -j marionette-harness -u none -t none&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the task is triggered, a chain of events&amp;nbsp;follows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;marionette-harness&lt;/code&gt; is defined by &lt;a href="https://hg.mozilla.org/mozilla-central/file/e4ea9261d5bb/testing/taskcluster/tasks/tests/harness_marionette.yml"&gt;harness_marionette.yml&lt;/a&gt;, which depends on &lt;a href="https://hg.mozilla.org/mozilla-central/file/e4ea9261d5bb/testing/taskcluster/tasks/harness_test.yml"&gt;harness_test.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hg.mozilla.org/mozilla-central/file/e4ea9261d5bb/testing/taskcluster/tasks/harness_test.yml"&gt;harness_test.yml&lt;/a&gt; says to run &lt;a href="https://hg.mozilla.org/mozilla-central/diff/e4ea9261d5bb/testing/docker/desktop-build/bin/build.sh"&gt;build.sh&lt;/a&gt; with the appropriate mozilla branch and&amp;nbsp;revision.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hg.mozilla.org/mozilla-central/file/e4ea9261d5bb/testing/taskcluster/tasks/tests/harness_marionette.yml"&gt;harness_marionette.yml&lt;/a&gt; sets more environment variables and parameters for build.sh to use (&lt;code&gt;JOB_SCRIPT&lt;/code&gt;, &lt;code&gt;MOZHARNESS_SCRIPT&lt;/code&gt;,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;So build.sh checks out the source tree and executes &lt;a href="https://hg.mozilla.org/mozilla-central/diff/e4ea9261d5bb/testing/taskcluster/scripts/tester/harness-test-linux.sh"&gt;harness-test-linux.sh&lt;/a&gt; (&lt;code&gt;JOB_SCRIPT&lt;/code&gt;)&amp;#8230;&lt;/li&gt;
&lt;li&gt;&amp;#8230;which in turn executes &lt;a href="https://hg.mozilla.org/mozilla-central/file/1e0b4e27bd51/testing/mozharness/scripts/marionette_harness_tests.py"&gt;marionette_harness_tests.py&lt;/a&gt; (&lt;code&gt;MOZHARNESS_SCRIPT&lt;/code&gt;) with the parameters passed on by&amp;nbsp;build.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;For Tasks that Make Sense in a gecko Source&amp;nbsp;Checkout&lt;/h1&gt;
&lt;p&gt;As you can see, I made the &lt;code&gt;build.sh&lt;/code&gt; script in the &lt;code&gt;desktop-build&lt;/code&gt; docker image execute an arbitrary in-tree &lt;code&gt;JOB_SCRIPT&lt;/code&gt;, and I created &lt;code&gt;harness-test-linux.sh&lt;/code&gt; to run mozharness within a gecko source&amp;nbsp;checkout. &lt;/p&gt;
&lt;h2&gt;Why not the desktop-test&amp;nbsp;image?&lt;/h2&gt;
&lt;p&gt;But we can also run arbitrary mozharness scripts thanks to the configuration in the desktop-test docker image! Yes, and all of that configuration is geared toward testing a Firefox binary, which implies downloading tools that my task either doesn&amp;#8217;t need or already has access to in the source tree. Now we have a lighter-weight option for executing tests that don&amp;#8217;t exercise&amp;nbsp;Firefox.&lt;/p&gt;
&lt;h2&gt;Why not&amp;nbsp;mach?&lt;/h2&gt;
&lt;p&gt;In my lazy work-in-progress, I had originally executed the Marionette harness tests via a simple call to mach, yet now I have this crazy chain of shell scripts that leads all the way mozharness. The mach command didn&amp;#8217;t disappear &amp;#8212; you can run Marionette harness tests with &lt;code&gt;./mach python-test ...&lt;/code&gt;. However, mozharness provides clearer control of Python dependencies, appropriate handling of return codes to report test results to Treeherder, and I can write a job-specific script and&amp;nbsp;configuration.&lt;/p&gt;</summary><category term="mozilla"></category><category term="foss"></category><category term="ci"></category><category term="automation"></category><category term="taskcluster"></category></entry></feed>